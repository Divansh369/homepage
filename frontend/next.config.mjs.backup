// homepage_funnel_version/frontend/next.config.mjs
import fs from 'fs';
import path from 'path';

/**
 * Parses a simple CSV file. Assumes no quoted commas.
 * @param {string} csvData The CSV content as a string.
 * @returns {Array<Object>} An array of objects representing rows.
 */
function parseSimpleCsv(csvData) {
    const lines = csvData.trim().split('\n');
    if (lines.length < 2) return []; // Need headers and at least one data row
    const headers = lines[0].split(',').map(h => h.trim());
    const data = [];
    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.trim());
        if (values.length === headers.length) {
            const entry = {};
            headers.forEach((header, index) => {
                entry[header] = values[index];
            });
            data.push(entry);
        }
    }
    return data;
}

/**
 * Reads projects from the CSV file.
 * @returns {Array<Object>} Array of project objects or empty array on error.
 */
function getProjectsFromCsv() {
    try {
        // Adjust path relative to next.config.mjs location
        const csvPath = path.resolve(process.cwd(), '..', 'projects.csv');
        console.log(`[Next Config] Reading projects CSV from: ${csvPath}`);
        if (!fs.existsSync(csvPath)) {
             console.error(`[Next Config] Error: projects.csv not found at ${csvPath}`);
             return [];
        }
        const csvData = fs.readFileSync(csvPath, 'utf8');
        const projects = parseSimpleCsv(csvData);
        console.log(`[Next Config] Found ${projects.length} projects in CSV.`);
        return projects;
    } catch (error) {
        console.error('[Next Config] Error reading or parsing projects.csv:', error);
        return [];
    }
}

const projects = getProjectsFromCsv();

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  // Configure rewrites to act as a reverse proxy
  async rewrites() {
    const projectRewrites = projects
      .filter(p => p.project_name && p.port) // Ensure project has name and port
      .map(project => {
          const sourcePath = `/app/${encodeURIComponent(project.project_name)}/:path*`;
          const destinationPath = `http://localhost:${project.port}/:path*`;
          console.log(`[Next Config] Creating rewrite: ${sourcePath} -> ${destinationPath}`);
          return {
            source: sourcePath,
            // Proxy to the project running on its specific port on localhost
            destination: destinationPath,
          };
      });

    return [
      // 1. Proxy API requests to the backend server
      {
        source: '/api/:path*',
        destination: `http://localhost:${process.env.BACKEND_PORT || 1024}/api/:path*`, // Use env var or default
      },
      {
        source: `/app/jupyter/:path*`,
        // Destination needs to match where Jupyter is internally listening
        // base_url + /tree + path
        destination: `http://localhost:9742/app/jupyter/:path*`,
     },
     {
      source: `/app/planka/:path*`,
      // Destination needs to match where Planka is internally listening
      // base_url + /tree + path
      destination: `http://localhost:3663/:path*`,
   },
   {
    source: `/app/nextcloud/:path*`,
    // Destination needs to match where Planka is internally listening
    // base_url + /tree + path
    destination: `http://localhost:8228/:path*`,
 },
      // 2. Add the dynamically generated project rewrites
      ...projectRewrites,
    ];
  },

   // Serve project icons statically via Next.js public folder proxying
   // This assumes you have a symlink `public/projects` -> `/home/divansh/projects`
   // Ensure this symlink exists: ln -s /home/divansh/projects homepage_funnel_version/frontend/public/projects
    images: {
       // domains: [], // If icons were external
    },
    // Optional: If using TypeScript, configure paths if needed
    // compiler: {
    //   paths: { ... }
    // }
};

export default nextConfig;
